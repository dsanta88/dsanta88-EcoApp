@page "/formproveedores"
@page "/formproveedores/{Id}"
@using EcoApp.Shared
@inject HttpClient Http
@using MatBlazor
@inject NavigationManager navigationManager
@using Newtonsoft.Json
@inject IJSRuntime js
@inject ServicioSingleton singleton

<div class="row alert bg-info">
    <div class="row col-md-1">

    </div>
    <div class="col-md-5">
        <h5> <b>@titulo</b></h5>
    </div>
</div>

@if (msgError != null)
{
    <div class="row alert bg-danger">
        <div class="row col-md-1">

        </div>
        <div class="col-md-5">
            <MatThemeProvider>
                <MatIcon Icon="cancel"> </MatIcon>   @msgError
            </MatThemeProvider>
        </div>
    </div>
}

<EditForm Model="@model" OnValidSubmit="Save">
    <div class="row">
        <div class="col-md-1"></div>
        <div class="col-md-4">
            <MatStringField @bind-Value="@model.RazonSocial" Label="Razon Social" Style="width:100%" Required="true"></MatStringField>
        </div>
        <div class="col-md-1"></div>
        <div class="col-md-4">
            <MatStringField @bind-Value="@model.Nit" Label="Nit" Style="width:100%"></MatStringField>
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-md-1"></div>
        <div class="col-md-4">
            <MatSelect Label="Tipo de proveedor" @bind-Value="model.Tipo">
                <MatOptionString></MatOptionString>
                <MatOptionString Value="1">EMPRESA</MatOptionString>
                <MatOptionString Value="2">PERSONA NATURAL</MatOptionString>
            </MatSelect>
        </div>
        <div class="col-md-1"></div>
        <div class="col-md-4">
            <MatStringField @bind-Value="@model.Telefono" Label="Teléfono" Style="width:100%"></MatStringField>
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-md-1"></div>
        <div class="col-md-4">
            <MatStringField @bind-Value="@model.Email" Label="Email" Type="email" Style="width:100%"></MatStringField>
        </div>
        <div class="col-md-1"></div>
        <div class="col-md-4">
            <MatStringField @bind-Value="@model.Celular" Label="Celular" Style="width:100%" Required="true"></MatStringField>
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-md-1"></div>
        <div class="col-md-4">
            <MatStringField @bind-Value="@model.Direccion" Label="Dirección" Style="width:100%" ></MatStringField>
        </div>
        <div class="col-md-1"></div>
        <div class="col-md-4">
            <MatSelect Label="Estado" @bind-Value=@model.Estado Required="true">
                <MatOption Value=true>ACTIVO</MatOption>
                <MatOption Value=false>INACTIVO</MatOption>
            </MatSelect>
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-md-1"></div>
        <div class="col-md-9">
            <b>Observación</b>
            <MatTextField @bind-Value="@model.Observacion" TextArea="true" Style="width:100%"></MatTextField>
        </div>
    </div>
    <hr />

    <div class="row">
        <div class="col-md-1"></div>
        <div class="col-md-2">
            <MatThemeProvider Theme="@theme3">
                <MatButton Raised="true" Icon="cancel" @onclick="Cancelar">Cancelar</MatButton>
            </MatThemeProvider>
        </div>
        <div class="col-md-2">

            @if (visibleGuardar)
            {
                <MatThemeProvider Theme="@theme1">
                    <MatButton Raised="true" Icon="save" Type="submit">Guardar</MatButton>
                </MatThemeProvider>
            }
        </div>
    </div>
</EditForm>
<br />
@code {

    [Parameter] public string Id { get; set; }

    public Proveedor model = new Proveedor();
    Response response = new Response();
    string titulo = "";
    string msgError = null;
    bool visibleGuardar = true;
    MatTheme theme1 = new MatTheme()
    {
        Primary = "green",
    };
    MatTheme theme3 = new MatTheme()
    {
        Primary = "red",
    };



    protected override async Task OnInitializedAsync()
    {

        await LoadData();
    }



    protected async Task Save()
    {
        visibleGuardar = false;
        string accion = "";
        model.RazonSocial = model.RazonSocial.ToUpper();
        if(model.Direccion!=null)
        {
            model.Direccion = model.Direccion.ToUpper();
        }
        if (model.Email != null)
        {
            model.Email = model.Email.ToLower();
        }


        model.UsuarioRegistroId = singleton.UsuarioId;
        model.FechaRegistro = DateTime.Now;

        msgError = null;

        if (model.Celular.Length != 10)
        {
            msgError = "El celular debe tener 11 digitos";
        }


        if (msgError == null)
        {

            if (Id != null)
            {
                accion = "Editar";
            }
            else
            {
                accion = "Ingresar";
            }

            var result = await Http.PostAsJsonAsync<Proveedor>($"api/Proveedores", model);
            response = result.Content.ReadFromJsonAsync<Response>().Result;

            if (response.IsSuccessful)
            {
                await RegistrarAuditoria(model, accion);
                navigationManager.NavigateTo("/indexproveedores");
            }
            else
            {
                msgError = response.Message;
                await js.InvokeAsync<string>("MensajeAlerta", msgError);
            }
        }
        else
        {
            await js.InvokeAsync<string>("MensajeAlerta", msgError);
        }
        visibleGuardar = true;
    }

    public void Cancelar()
    {
        navigationManager.NavigateTo("/indexproveedores");
    }


    protected async Task LoadData()
    {
        model = new Proveedor();


        if (Id != null)
        {
            titulo = "EDITAR PROVEEDOR";
            response = await Http.GetFromJsonAsync<Response>($"api/proveedores/GetById/{Id}");
            if (response.IsSuccessful)
            {
                model = JsonConvert.DeserializeObject<Proveedor>(response.Data.ToString());
            }

        }
        else
        {
            model.Estado = true;
            titulo = "NUEVO PROVEEDOR";
        }
    }

    protected async Task RegistrarAuditoria(Proveedor model, string accion)
    {
        string accionDescipcion = "";

        if (accion.ToLower() == "editar")
        {
            accionDescipcion = "edito";
        }
        else if (accion.ToLower() == "ingresar")
        {
            accionDescipcion = "ingreso";
        }
        else if (accion.ToLower() == "eliminar")
        {
            accionDescipcion = "elimino";
        }

        string tipoDescripcion = "";
        if (model.Tipo=="1")
        {
            tipoDescripcion = "EMPRESA";
        }
        else
        {
            tipoDescripcion = "PERSONA NATURAL";
        }


        if (model.Estado)
        {
            model.EstadoDescripcion = "ACTIVO";
        }
        else
        {
            model.EstadoDescripcion = "INACTIVO";
        }

        Auditoria auditoria = new Auditoria();
        auditoria.Accion = accion;
        auditoria.Tabla = "Proveedores";
        auditoria.Usuario = singleton.Email;
        auditoria.UsuarioNombre = singleton.UsuarioNombre;
        auditoria.UsuarioRegistroId = singleton.UsuarioId;
        auditoria.FechaRegistro = DateTime.Now;

        auditoria.Mensaje = "El usuario " + auditoria.UsuarioNombre + " " + accionDescipcion.ToUpper() + " el siguiente Proveedor:----" + "Id: " + model.Id + "----RazonSocial:" + model.RazonSocial + "----Nit: " + model.Nit + "----TipoProveedor:" + tipoDescripcion + "----Email:" + model.Email + "----Celular:" + model.Celular + "----Teléfono:" + model.Telefono + "----Observación:" + model.Observacion + "----Estado:" + model.EstadoDescripcion;

        await Http.PostAsJsonAsync<Auditoria>($"api/auditoria", auditoria);

    }

}
