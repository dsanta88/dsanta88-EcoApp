@page "/formgastos"
@page "/formgastos/{Id}"
@using EcoApp.Shared
@using System.IO
@inject HttpClient Http
@using MatBlazor
@inject NavigationManager navigationManager
@using Newtonsoft.Json
@inject IJSRuntime js
@inject ServicioSingleton singleton
@inject IFileReaderService fileReaderService;


<div class="row alert bg-info">
    <div class="row col-md-1">

    </div>
    <div class="col-md-5">
        <h5> <b>@titulo</b></h5>
    </div>
</div>

@if (msgError != null)
{
    <div class="row alert bg-danger">
        <div class="row col-md-1">

        </div>
        <div class="col-md-5">
            <MatThemeProvider>
                <MatIcon Icon="cancel"> </MatIcon>   @msgError
            </MatThemeProvider>
        </div>
    </div>
}

<EditForm Model="@model" OnValidSubmit="Save">
    <div class="row">
        <div class="col-md-1"></div>
        <div class="col-md-4">
            <b>Tipo de gasto</b>
            <RadzenDropDown AllowClear="true"
                            AllowFiltering="true"
                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            @bind-Value="model.GastoTipoId"
                            Multiple="false" Placeholder="[SELECCIONAR]"
                            Data="@listGastosTipos"
                            TextProperty="Nombre"
                            ValueProperty="Id"
                            Style="width:100%" />
        </div>

        <div class="col-md-1"></div>
        <div class="col-md-4">
            <b>Fecha de pago</b>
            <RadzenDatePicker Style="width:100%" ShowTime="false" @bind-Value="@model.FechaPago" HourFormat="12" DateFormat="d MMMM yyyy" />
        </div>

    </div>
    <br />
    <div class="row">
        <div class="col-md-1"></div>
        <div class="col-md-4">
            <b>Proveedor</b>
            <RadzenDropDown AllowClear="true"
                            AllowFiltering="true"
                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            @bind-Value="model.ProveedorId"
                            Multiple="false" Placeholder="[SELECCIONAR]"
                            Data="@listProveedores"
                            TextProperty="RazonSocial"
                            ValueProperty="Id"
                            Style="width:100%" />
        </div>
        <div class="col-md-1"></div>
        <div class="col-md-4">
            <b>Valor</b>
            <MatTextField @bind-Value="@model.Valor" Required="true" Style="width:50%"></MatTextField>
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-md-1"></div>
        <div class="col-md-4">
            <b>Responsable</b>
            <RadzenDropDown AllowClear="true"
                            AllowFiltering="true"
                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            @bind-Value="model.ResponsableUsuarioId"
                            Multiple="false" Placeholder="[SELECCIONAR]"
                            Data="@listUsuarios"
                            TextProperty="Nombre"
                            ValueProperty="Id"
                            Style="width:100%" />
        </div>
        <div class="col-md-1"></div>
        <div class="col-md-4">
            <b>Adjuntar documento</b>
            <input class="bg-light" type="file" @ref="@inputElement" accept=".pdf,.png,.jpg,.image ">
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-md-1"></div>
        <div class="col-md-10">
            <b>Observación</b>
            <MatTextField @bind-Value="@model.Observacion" TextArea="true" Style="width:100%"></MatTextField>
        </div>
    </div>
    <br />
    @if (model.ArchivoRuta != null)
    {

        <div class="row">
            <div class="col-md-1"></div>
            <div class="col-md-10">
                <embed src="@model.ArchivoRuta" style="width:100%;height:500px" controls />
                <br />
            </div>
        </div>
    }

    <hr />
    <div class="row">
        <div class="col-md-1"></div>
        <div class="col-md-2">
            <MatThemeProvider Theme="@theme3">
                <MatButton Raised="true" Icon="cancel" @onclick="Cancelar">Cancelar</MatButton>
            </MatThemeProvider>
        </div>
        <div class="col-md-2">

            @if (visibleGuardar)
            {
                <MatThemeProvider Theme="@theme1">
                    <MatButton Raised="true" Icon="save" Type="submit">Guardar</MatButton>
                </MatThemeProvider>
            }
        </div>
    </div>
</EditForm>
<br />
@code {

    [Parameter] public string Id { get; set; }

    public Gasto model = new Gasto();
    public List<Usuario> listUsuarios = new List<Usuario>();
    public List<GastoTipo> listGastosTipos = new List<GastoTipo>();
    public List<Proveedor> listProveedores = new List<Proveedor>();

    Response response = new Response();
    string titulo = "";
    string msgError = null;
    bool visibleGuardar = true;
    ElementReference inputElement;
    string fileNombre = "";
    string fileExtension = "";
    string fileOld = "";

    MatTheme theme1 = new MatTheme()
    {
        Primary = "green",
    };
    MatTheme theme3 = new MatTheme()
    {
        Primary = "red",
    };



    protected override async Task OnInitializedAsync()
    {

        await LoadData();
    }



    public void Cancelar()
    {
        navigationManager.NavigateTo("/indexgastos");
    }


    protected async Task LoadData()
    {
        model = new Gasto();
        model.FechaPago = DateTime.Now;

        //Usuarios
        response = await Http.GetFromJsonAsync<Response>($"api/usuarios");
        if (response.IsSuccessful)
        {
            listUsuarios = JsonConvert.DeserializeObject<List<Usuario>>(response.Data.ToString());
            listUsuarios = listUsuarios.Where(x => x.EstadoUsuario == true).ToList();
        }

        //Tipos de gastos
        response = await Http.GetFromJsonAsync<Response>($"api/gastostipos");
        if (response.IsSuccessful)
        {
            listGastosTipos = JsonConvert.DeserializeObject<List<GastoTipo>>(response.Data.ToString());
            listGastosTipos = listGastosTipos.Where(x => x.Estado == true).ToList();
        }

        //Proveedores
        response = await Http.GetFromJsonAsync<Response>($"api/proveedores");
        if (response.IsSuccessful)
        {
            listProveedores = JsonConvert.DeserializeObject<List<Proveedor>>(response.Data.ToString());
            listProveedores = listProveedores.Where(x => x.Estado == true).ToList();
        }

        if (Id != null)
        {
            titulo = "EDITAR GASTO";
            response = await Http.GetFromJsonAsync<Response>($"api/gastos/GetById/{Id}");
            if (response.IsSuccessful)
            {
                model = JsonConvert.DeserializeObject<Gasto>(response.Data.ToString());
                fileOld = model.ArchivoRuta;
            }

        }
        else
        {
            titulo = "NUEVO GASTO";
        }
    }

    protected async Task Save()

    {
        string accion = "";
        visibleGuardar = false;
        model.UsuarioRegistroId = singleton.UsuarioId;

        msgError = null;
        model.UsuarioRegistroId = singleton.UsuarioId;


        if (model.FechaPago > DateTime.Now)
        {
            msgError = "La fecha de pago debe ser menor o igual a la fecha actual.";
        }
        else if (model.ResponsableUsuarioId == null)
        {
            msgError = "Debe seleccionar el usuario responsable.";
        }
        else if (model.ProveedorId == null)
        {
            msgError = "Debe seleccionar el proveedor.";
        }
        else if (model.Valor <= 0)
        {
            msgError = "El valor debe ser mayor a cero.";
        }


        if (msgError == null)
        {


            await CargarArchivo();



            if (msgError == null)
            {
                if (Id != null)
                {
                    accion = "Editar";
                }
                else
                {
                    accion = "Ingresar";
                }

                var result = await Http.PostAsJsonAsync<Gasto>($"api/gastos", model);
                response = result.Content.ReadFromJsonAsync<Response>().Result;

                if (response.IsSuccessful)
                {
                    await RegistrarAuditoria(model, accion);
                    navigationManager.NavigateTo("/indexgastos");
                }
                else
                {
                    msgError = response.Message;
                    await js.InvokeAsync<string>("MensajeAlerta", msgError);
                }
            }
            else
            {
                await js.InvokeAsync<string>("MensajeAlerta", msgError);
            }

        }
        else
        {
            await js.InvokeAsync<string>("MensajeAlerta", msgError);
        }

        visibleGuardar = true;

    }


    public async Task CargarArchivo()
    {

        try
        {
            foreach (var file in await fileReaderService.CreateReference(inputElement).EnumerateFilesAsync())
            {
                var fileInfo = await file.ReadFileInfoAsync();
                fileExtension = System.IO.Path.GetExtension(fileInfo.Name);
                fileNombre = DateTime.Now.Year.ToString() + DateTime.Now.Month.ToString() + DateTime.Now.Day.ToString() + DateTime.Now.Hour.ToString() + DateTime.Now.Minute.ToString() + DateTime.Now.Second.ToString() + fileExtension;
                model.ArchivoRuta = "../Upload/Gastos/"+fileNombre;

                string ArchivoBase64;

                using (MemoryStream memorystream = await file.CreateMemoryStreamAsync(4 * 1024))
                {

                    byte[] bytesimage = new byte[memorystream.Length];
                    memorystream.Read(bytesimage, 0, (int)memorystream.Length);
                    ArchivoBase64 = Convert.ToBase64String(bytesimage);

                    Archivo archivo = new Archivo();
                    archivo.Base64 = ArchivoBase64;
                    archivo.Formato = fileExtension;
                    archivo.Nombre = fileNombre;
                    archivo.RutaFile = model.ArchivoRuta.Replace("../", @"\");

                    var result = await Http.PostAsJsonAsync<Archivo>("api/uploadfiles", archivo);
                    response = result.Content.ReadFromJsonAsync<Response>().Result;
                    if (response.IsSuccessful)
                    {
                        //string rutaDelete = JsonConvert.DeserializeObject<Archivo>(response.Data.ToString()).RutaCarpeta;
                        //rutaDelete = rutaDelete + fileOld.Replace("../", @"");
                        //rutaDelete = @rutaDelete.Replace("/", @"\");
                        //if (File.Exists(rutaDelete))
                        //{
                        //    File.Delete(rutaDelete);
                        //}
                    }
                    else
                    {
                        msgError = response.Message;
                        await js.InvokeAsync<string>("MensajeAlerta", msgError);
                    }
                }
            }
        }

        catch (Exception ex)
        {
            msgError = ex.Message;
        }
    }


    protected async Task RegistrarAuditoria(Gasto model, string accion)
    {
        string accionDescipcion = "";

        if (accion.ToLower() == "editar")
        {
            accionDescipcion = "edito";
        }
        else if (accion.ToLower() == "ingresar")
        {
            accionDescipcion = "ingreso";
        }
        else if (accion.ToLower() == "eliminar")
        {
            accionDescipcion = "elimino";
        }



        Auditoria auditoria = new Auditoria();
        auditoria.Accion = accion.ToUpper();
        auditoria.Tabla = "Gastos";
        auditoria.Usuario = singleton.Email;
        auditoria.UsuarioNombre = singleton.UsuarioNombre;
        auditoria.UsuarioRegistroId = singleton.UsuarioId;
        auditoria.FechaRegistro = DateTime.Now;

        string tipoGasto = listGastosTipos.Where(x => x.Id == model.GastoTipoId).FirstOrDefault().Nombre;
        string proveedor = listProveedores.Where(x => x.Id == model.ProveedorId).FirstOrDefault().RazonSocial;
        string responsableNombre = listUsuarios.Where(x => x.Id == model.ResponsableUsuarioId).FirstOrDefault().Nombre;

        auditoria.Mensaje = "El usuario " + auditoria.UsuarioNombre + " " + accionDescipcion.ToUpper() + " el siguiente Gasto:----" + "Id: " + model.Id + "----FechaPago:" + model.FechaPago  + "----TipoGasto:" + tipoGasto + "----Proveedor: " + proveedor + "----Responsable: " + responsableNombre + "----Valor:" + model.Valor;

        await Http.PostAsJsonAsync<Auditoria>($"api/auditoria", auditoria);

    }

}
