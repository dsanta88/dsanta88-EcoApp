@*@page "/formingresos"
@page "/formingresos/{Id}"
@using EcoApp.Shared
@inject HttpClient Http
@using MatBlazor
@inject NavigationManager navigationManager
@using Newtonsoft.Json
@inject IJSRuntime js
@inject ServicioSingleton singleton

<div class="row alert bg-info">
    <div class="row col-md-1">

    </div>
    <div class="col-md-5">
        <h5> <b>@titulo</b></h5>
    </div>
</div>

@if (msgError != null)
{
    <div class="row alert bg-danger">
        <div class="row col-md-1">

        </div>
        <div class="col-md-5">
            <MatThemeProvider>
                <MatIcon Icon="cancel"> </MatIcon>   @msgError
            </MatThemeProvider>
        </div>
    </div>
}

<EditForm Model="@model" OnValidSubmit="Save">
    <div class="row">
        <div class="col-md-1"></div>
        <div class="col-md-4">
            <b>Fecha de pago</b>
            <RadzenDatePicker Style="width:100%" ShowTime="false" @bind-Value="@model.FechaPago" HourFormat="12" DateFormat="d MMMM yyyy" />
        </div>
        <div class="col-md-1"></div>
        <div class="col-md-4">
            <b>Tipo de ingreso</b>
            <RadzenDropDown AllowClear="true"
                            AllowFiltering="true"
                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            @bind-Value="model.IngresoTipoId"
                            Multiple="false" Placeholder="[SELECCIONAR]"
                            Data="@listIngresosTipos"
                            TextProperty="Nombre"
                            ValueProperty="Id"
                            Style="width:100%" />
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-md-1"></div>
        <div class="col-md-4">
            <b>Usuario</b>
            <RadzenDropDown AllowClear="true"
                            AllowFiltering="true"
                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            @bind-Value="model.UsuarioId"
                            Multiple="false" Placeholder="[SELECCIONAR]"
                            Data="@listUsuarios"
                            TextProperty="Nombre"
                            ValueProperty="Id"
                            Style="width:100%" />
        </div>
        <div class="col-md-1"></div>
        <div class="col-md-3">
            <b>Adjuntar documento</b>
            <input class="bg-light" type="file" @ref="@inputElement" accept=".pdf .png .jpg ">
        </div>

    </div>
    <br />
    <div class="row">
        <div class="col-md-1"></div>
        <div class="col-md-4">
            <b>Valor</b>
            <MatTextField @bind-Value="@model.Valor" Required="true" Style="width:50%"></MatTextField>
        </div>

    </div>
    <br />
    <div class="row">
        <div class="col-md-1"></div>
        <div class="col-md-10">
            <b>Observación</b>
            <MatTextField @bind-Value="@model.Observacion" TextArea="true" Style="width:100%"></MatTextField>
        </div>
    </div>
    <hr />

    <div class="row">
        <div class="col-md-1"></div>
        <div class="col-md-2">
            <MatThemeProvider Theme="@theme3">
                <MatButton Raised="true" Icon="cancel" @onclick="Cancelar">Cancelar</MatButton>
            </MatThemeProvider>
        </div>
        <div class="col-md-2">

            @if (visibleGuardar)
            {
                <MatThemeProvider Theme="@theme1">
                    <MatButton Raised="true" Icon="save" Type="submit">Guardar</MatButton>
                </MatThemeProvider>
            }
        </div>
    </div>
</EditForm>
<br />
@code {

    [Parameter] public string Id { get; set; }

    public Ingreso model = new Ingreso();
    public List<Usuario> listUsuarios = new List<Usuario>();
    public List<IngresoTipo> listIngresosTipos = new List<IngresoTipo>();
    Response response = new Response();
    string titulo = "";
    string msgError = null;
    bool visibleGuardar = true;
    public bool selectDocument = false;
    ElementReference inputElement;


    MatTheme theme1 = new MatTheme()
    {
        Primary = "green",
    };
    MatTheme theme3 = new MatTheme()
    {
        Primary = "red",
    };



    protected override async Task OnInitializedAsync()
    {

        await LoadData();
    }



    public void Cancelar()
    {
        navigationManager.NavigateTo("/indexingresos");
    }


    protected async Task LoadData()
    {
        model = new Ingreso();
        model.FechaPago = DateTime.Now;

        //Usuarios
        response = await Http.GetFromJsonAsync<Response>($"api/usuarios");
        if (response.IsSuccessful)
        {
            listUsuarios = JsonConvert.DeserializeObject<List<Usuario>>(response.Data.ToString());
            listUsuarios = listUsuarios.Where(x => x.EstadoUsuario == true).ToList();
        }

        //Tipos de ingresos
        response = await Http.GetFromJsonAsync<Response>($"api/ingresostipos");
        if (response.IsSuccessful)
        {
            listIngresosTipos = JsonConvert.DeserializeObject<List<IngresoTipo>>(response.Data.ToString());
            listIngresosTipos = listIngresosTipos.Where(x => x.Estado == true).ToList();
        }


        if (Id != null)
        {
            titulo = "EDITAR INGRESO";
            response = await Http.GetFromJsonAsync<Response>($"api/ingresos/GetById/{Id}");
            if (response.IsSuccessful)
            {
                model = JsonConvert.DeserializeObject<Ingreso>(response.Data.ToString());
            }

        }
        else
        {
            titulo = "NUEVO INGRESO";
        }
    }

    public async Task CargarArchivo()
    {

        try
        {
            foreach (var file in await fileReaderService.CreateReference(inputElement).EnumerateFilesAsync())
            {
                selectDocument = true;
                string ArchivoBase64;

                using (MemoryStream memorystream = await file.CreateMemoryStreamAsync(4 * 1024))
                {

                    byte[] bytesimage = new byte[memorystream.Length];
                    memorystream.Read(bytesimage, 0, (int)memorystream.Length);
                    ArchivoBase64 = Convert.ToBase64String(bytesimage);


                    Archivo archivo = new Archivo();
                    archivo.Base64 = ArchivoBase64;
                    archivo.Formato = formato;
                    archivo.Nombre = nombreArchivo;
                    archivo.EmpresaId = singleton.EmpresaId;

                    var result = await Http.PostAsJsonAsync<Archivo>("api/uploadfiles", archivo);
                    response = result.Content.ReadFromJsonAsync<Response>().Result;
                    if (response.IsSuccessful)
                    {
                        stateUploadFile = true;
                    }
                    else
                    {
                        msgError = response.Message;
                        await js.InvokeAsync<string>("MensajeAlerta", msgError);
                    }
                }
            }
        }

        catch (Exception ex)
        {
            stateUploadFile = false;
            msgError = ex.Message;
        }
    }


    protected async Task RegistrarAuditoria(Ingreso model, string accion)
    {
        //        string accionDescipcion = "";

        //        if (accion.ToLower() == "editar")
        //        {
        //            accionDescipcion = "edito";
        //        }
        //        else if (accion.ToLower() == "ingresar")
        //        {
        //            accionDescipcion = "ingreso";
        //        }
        //        else if (accion.ToLower() == "eliminar")
        //        {
        //            accionDescipcion = "elimino";
        //        }

        //¿

        //        Auditoria auditoria = new Auditoria();
        //        auditoria.Accion = accion.ToUpper();
        //        auditoria.Tabla = "Ingresos";
        //        auditoria.Usuario = singleton.Email;
        //        auditoria.UsuarioNombre = singleton.UsuarioNombre;
        //        auditoria.UsuarioRegistroId = singleton.UsuarioId;
        //        auditoria.FechaRegistro = DateTime.Now;

        //        auditoria.Mensaje = "El usuario " + auditoria.UsuarioNombre + " " + accionDescipcion.ToUpper() + " el siguiente Ingreso:----" + "Id: " + model.Id + "----RazonSocial:" + model.RazonSocial + "----Nit: " + model.Nit + "----TipoProveedor:" + tipoDescripcion + "----Email:" + model.Email + "----Celular:" + model.Celular + "----Teléfono:" + model.Telefono + "----Observación:" + model.Observacion + "----Estado:" + model.EstadoDescripcion;

        //        await Http.PostAsJsonAsync<Auditoria>($"api/auditoria", auditoria);

    }

}*@
